
pointersExplained.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00000c18  00000c8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c18  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d6c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001587  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097a  00000000  00000000  000023cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b02  00000000  00000000  00002d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00003848  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007bf6  00000000  00000000  000039f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000993  00000000  00000000  0000b5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000bf79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003200  00000000  00000000  0000bff1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	3d d2       	rcall	.+1146   	; 0x506 <main>
  8c:	c3 c5       	rjmp	.+2950   	; 0xc14 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 6f       	ori	r24, 0xF0	; 240
  94:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8b 60       	ori	r24, 0x0B	; 11
  9a:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
  9c:	20 9a       	sbi	0x04, 0	; 4
  9e:	08 95       	ret

000000a0 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	00 d0       	rcall	.+0      	; 0xa6 <lcd_write_4+0x6>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <lcd_write_4+0x8>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	1a 82       	std	Y+2, r1	; 0x02
  b0:	1b 82       	std	Y+3, r1	; 0x03
  b2:	1c 82       	std	Y+4, r1	; 0x04
  b4:	fe 01       	movw	r30, r28
  b6:	31 96       	adiw	r30, 0x01	; 1
  b8:	27 e0       	ldi	r18, 0x07	; 7
  ba:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  bc:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
  be:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  c0:	ac 01       	movw	r20, r24
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <lcd_write_4+0x2a>
  c6:	55 95       	asr	r21
  c8:	47 95       	ror	r20
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <lcd_write_4+0x26>
  ce:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
  d0:	60 83       	st	Z, r22
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
  d8:	23 30       	cpi	r18, 0x03	; 3
  da:	31 05       	cpc	r19, r1
  dc:	89 f7       	brne	.-30     	; 0xc0 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
  e4:	2b b1       	in	r18, 0x0b	; 11
  e6:	49 81       	ldd	r20, Y+1	; 0x01
  e8:	30 e8       	ldi	r19, 0x80	; 128
  ea:	43 9f       	mul	r20, r19
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	30 e4       	ldi	r19, 0x40	; 64
  f4:	93 9f       	mul	r25, r19
  f6:	a0 01       	movw	r20, r0
  f8:	11 24       	eor	r1, r1
  fa:	48 2b       	or	r20, r24
  fc:	42 2b       	or	r20, r18
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	98 9f       	mul	r25, r24
 104:	90 01       	movw	r18, r0
 106:	11 24       	eor	r1, r1
 108:	24 2b       	or	r18, r20
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	30 e1       	ldi	r19, 0x10	; 16
 10e:	93 9f       	mul	r25, r19
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
 118:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_write_4+0x7c>
 120:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
 122:	5b 98       	cbi	0x0b, 3	; 11
 124:	35 e0       	ldi	r19, 0x05	; 5
 126:	3a 95       	dec	r19
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_4+0x86>
 12a:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 13e:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
 140:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 142:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
 144:	ad df       	rcall	.-166    	; 0xa0 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
 146:	8c 2f       	mov	r24, r28
 148:	82 95       	swap	r24
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	a9 df       	rcall	.-174    	; 0xa0 <lcd_write_4>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 156:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 158:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 15a:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 15c:	a1 df       	rcall	.-190    	; 0xa0 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 15e:	8c 2f       	mov	r24, r28
 160:	82 95       	swap	r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	9d df       	rcall	.-198    	; 0xa0 <lcd_write_4>
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 16a:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 16c:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 16e:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 170:	5b 9a       	sbi	0x0b, 3	; 11
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_check_BF_4+0xa>
 178:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 17a:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 17c:	5b 98       	cbi	0x0b, 3	; 11
 17e:	95 e0       	ldi	r25, 0x05	; 5
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_check_BF_4+0x16>
 184:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 186:	5b 9a       	sbi	0x0b, 3	; 11
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_check_BF_4+0x20>
 18e:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 190:	5b 98       	cbi	0x0b, 3	; 11
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_check_BF_4+0x2a>
 198:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
 19a:	88 23       	and	r24, r24
 19c:	4c f3       	brlt	.-46     	; 0x170 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 19e:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 1a0:	57 9a       	sbi	0x0a, 7	; 10
 1a2:	08 95       	ret

000001a4 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	80 e7       	ldi	r24, 0x70	; 112
 1a8:	92 e0       	ldi	r25, 0x02	; 2
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <lcd_init_4f+0x6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init_4f+0x10>
 1b4:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 1b6:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 1b8:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 1ba:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	70 df       	rcall	.-288    	; 0xa0 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	25 e3       	ldi	r18, 0x35	; 53
 1c2:	2a 95       	dec	r18
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init_4f+0x1e>
 1c6:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	6a df       	rcall	.-300    	; 0xa0 <lcd_write_4>
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init_4f+0x2c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 1d6:	00 00       	nop
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	62 df       	rcall	.-316    	; 0xa0 <lcd_write_4>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init_4f+0x3c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 1e6:	00 00       	nop
 1e8:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 1ea:	5a df       	rcall	.-332    	; 0xa0 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 1ec:	be df       	rcall	.-132    	; 0x16a <lcd_check_BF_4>
 1ee:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 1f0:	b0 df       	rcall	.-160    	; 0x152 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 1f2:	bb df       	rcall	.-138    	; 0x16a <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
 1f4:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 1f6:	ad df       	rcall	.-166    	; 0x152 <lcd_write_instruction_4f>
 1f8:	b8 df       	rcall	.-144    	; 0x16a <lcd_check_BF_4>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 1fc:	aa df       	rcall	.-172    	; 0x152 <lcd_write_instruction_4f>
 1fe:	b5 df       	rcall	.-150    	; 0x16a <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	a7 df       	rcall	.-178    	; 0x152 <lcd_write_instruction_4f>
 204:	b2 df       	rcall	.-156    	; 0x16a <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	a4 cf       	rjmp	.-184    	; 0x152 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 20a:	08 95       	ret

0000020c <initLCD>:
 20c:	41 df       	rcall	.-382    	; 0x90 <configLCDPorts>
 20e:	ca cf       	rjmp	.-108    	; 0x1a4 <lcd_init_4f>
 210:	08 95       	ret

00000212 <lcd_write_string_4f>:
{
	/* Configure the data ports and pins */
	configLCDPorts();

	/* Initialize the LCD controller as determined by instructions */
	lcd_init_4f();
 212:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	00 d0       	rcall	.+0      	; 0x21c <lcd_write_string_4f+0xa>
 21c:	cd b7       	in	r28, 0x3d	; 61
 21e:	de b7       	in	r29, 0x3e	; 62
 220:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
 222:	1a 82       	std	Y+2, r1	; 0x02
 224:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
 226:	e9 81       	ldd	r30, Y+1	; 0x01
 228:	fa 81       	ldd	r31, Y+2	; 0x02
 22a:	e8 0f       	add	r30, r24
 22c:	f9 1f       	adc	r31, r25
 22e:	80 81       	ld	r24, Z
 230:	88 23       	and	r24, r24
 232:	99 f0       	breq	.+38     	; 0x25a <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
 234:	9a df       	rcall	.-204    	; 0x16a <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
 236:	e9 81       	ldd	r30, Y+1	; 0x01
 238:	fa 81       	ldd	r31, Y+2	; 0x02
 23a:	e0 0f       	add	r30, r16
 23c:	f1 1f       	adc	r31, r17
 23e:	80 81       	ld	r24, Z
 240:	7c df       	rcall	.-264    	; 0x13a <lcd_write_character_4f>
        i++;
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	9a 83       	std	Y+2, r25	; 0x02
 24a:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
 24c:	e9 81       	ldd	r30, Y+1	; 0x01
 24e:	fa 81       	ldd	r31, Y+2	; 0x02
 250:	e0 0f       	add	r30, r16
 252:	f1 1f       	adc	r31, r17
 254:	80 81       	ld	r24, Z
 256:	81 11       	cpse	r24, r1
 258:	ed cf       	rjmp	.-38     	; 0x234 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
 268:	df 92       	push	r13
 26a:	ef 92       	push	r14
 26c:	ff 92       	push	r15
 26e:	0f 93       	push	r16
 270:	1f 93       	push	r17
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	af 97       	sbiw	r28, 0x2f	; 47
 27c:	0f b6       	in	r0, 0x3f	; 63
 27e:	f8 94       	cli
 280:	de bf       	out	0x3e, r29	; 62
 282:	0f be       	out	0x3f, r0	; 63
 284:	cd bf       	out	0x3d, r28	; 61
 286:	18 2f       	mov	r17, r24
 288:	d6 2e       	mov	r13, r22
 28a:	07 2f       	mov	r16, r23
 28c:	84 2f       	mov	r24, r20
 28e:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
 290:	20 e2       	ldi	r18, 0x20	; 32
 292:	30 e2       	ldi	r19, 0x20	; 32
 294:	3a 83       	std	Y+2, r19	; 0x02
 296:	29 83       	std	Y+1, r18	; 0x01
 298:	20 e2       	ldi	r18, 0x20	; 32
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	3c 83       	std	Y+4, r19	; 0x04
 29e:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
 2a0:	96 e1       	ldi	r25, 0x16	; 22
 2a2:	e4 e1       	ldi	r30, 0x14	; 20
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	de 01       	movw	r26, r28
 2a8:	5a 96       	adiw	r26, 0x1a	; 26
 2aa:	01 90       	ld	r0, Z+
 2ac:	0d 92       	st	X+, r0
 2ae:	9a 95       	dec	r25
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
 2b2:	4f 3f       	cpi	r20, 0xFF	; 255
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2b6:	4a e0       	ldi	r20, 0x0A	; 10
 2b8:	be 01       	movw	r22, r28
 2ba:	6f 5f       	subi	r22, 0xFF	; 255
 2bc:	7f 4f       	sbci	r23, 0xFF	; 255
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	90 d1       	rcall	.+800    	; 0x5e2 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	71 e0       	ldi	r23, 0x01	; 1
 2c6:	8d 2d       	mov	r24, r13
 2c8:	90 2f       	mov	r25, r16
 2ca:	82 d1       	rcall	.+772    	; 0x5d0 <strcmp>
 2cc:	89 2b       	or	r24, r25
 2ce:	09 f4       	brne	.+2      	; 0x2d2 <updateLCDScreen+0x6a>
 2d0:	7f c0       	rjmp	.+254    	; 0x3d0 <updateLCDScreen+0x168>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	71 e0       	ldi	r23, 0x01	; 1
 2d6:	c7 01       	movw	r24, r14
 2d8:	7b d1       	rcall	.+758    	; 0x5d0 <strcmp>
 2da:	89 2b       	or	r24, r25
 2dc:	31 f4       	brne	.+12     	; 0x2ea <updateLCDScreen+0x82>
 2de:	0f 2e       	mov	r0, r31
 2e0:	f9 e2       	ldi	r31, 0x29	; 41
 2e2:	ef 2e       	mov	r14, r31
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	ff 2e       	mov	r15, r31
 2e8:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 2ea:	ce 01       	movw	r24, r28
 2ec:	4a 96       	adiw	r24, 0x1a	; 26
 2ee:	9f 93       	push	r25
 2f0:	8f 93       	push	r24
 2f2:	ff 92       	push	r15
 2f4:	ef 92       	push	r14
 2f6:	49 97       	sbiw	r24, 0x19	; 25
 2f8:	9f 93       	push	r25
 2fa:	8f 93       	push	r24
 2fc:	0f 93       	push	r16
 2fe:	df 92       	push	r13
 300:	85 e0       	ldi	r24, 0x05	; 5
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	9f 93       	push	r25
 306:	8f 93       	push	r24
 308:	1f 92       	push	r1
 30a:	85 e1       	ldi	r24, 0x15	; 21
 30c:	8f 93       	push	r24
 30e:	ce 01       	movw	r24, r28
 310:	05 96       	adiw	r24, 0x05	; 5
 312:	9f 93       	push	r25
 314:	8f 93       	push	r24
 316:	88 d1       	rcall	.+784    	; 0x628 <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
 318:	6e e0       	ldi	r22, 0x0E	; 14
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	8d 2d       	mov	r24, r13
 31e:	90 2f       	mov	r25, r16
 320:	57 d1       	rcall	.+686    	; 0x5d0 <strcmp>
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	89 2b       	or	r24, r25
 32e:	a9 f4       	brne	.+42     	; 0x35a <updateLCDScreen+0xf2>
 330:	ce 01       	movw	r24, r28
 332:	4a 96       	adiw	r24, 0x1a	; 26
 334:	9f 93       	push	r25
 336:	8f 93       	push	r24
 338:	8b e0       	ldi	r24, 0x0B	; 11
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	9f 93       	push	r25
 33e:	8f 93       	push	r24
 340:	1f 92       	push	r1
 342:	85 e1       	ldi	r24, 0x15	; 21
 344:	8f 93       	push	r24
 346:	ce 01       	movw	r24, r28
 348:	05 96       	adiw	r24, 0x05	; 5
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	6c d1       	rcall	.+728    	; 0x628 <snprintf>
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	f8 94       	cli
 354:	de bf       	out	0x3e, r29	; 62
 356:	0f be       	out	0x3f, r0	; 63
 358:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
 35a:	12 30       	cpi	r17, 0x02	; 2
 35c:	61 f0       	breq	.+24     	; 0x376 <updateLCDScreen+0x10e>
 35e:	18 f4       	brcc	.+6      	; 0x366 <updateLCDScreen+0xfe>
 360:	11 30       	cpi	r17, 0x01	; 1
 362:	31 f0       	breq	.+12     	; 0x370 <updateLCDScreen+0x108>
 364:	10 c0       	rjmp	.+32     	; 0x386 <updateLCDScreen+0x11e>
 366:	13 30       	cpi	r17, 0x03	; 3
 368:	49 f0       	breq	.+18     	; 0x37c <updateLCDScreen+0x114>
 36a:	14 30       	cpi	r17, 0x04	; 4
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne);
 36c:	51 f0       	breq	.+20     	; 0x382 <updateLCDScreen+0x11a>
 36e:	0b c0       	rjmp	.+22     	; 0x386 <updateLCDScreen+0x11e>
			break;
 370:	80 e8       	ldi	r24, 0x80	; 128
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo);
 372:	ef de       	rcall	.-546    	; 0x152 <lcd_write_instruction_4f>
 374:	08 c0       	rjmp	.+16     	; 0x386 <updateLCDScreen+0x11e>
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree);
 376:	80 ec       	ldi	r24, 0xC0	; 192
 378:	ec de       	rcall	.-552    	; 0x152 <lcd_write_instruction_4f>
 37a:	05 c0       	rjmp	.+10     	; 0x386 <updateLCDScreen+0x11e>
			break;
 37c:	84 e9       	ldi	r24, 0x94	; 148
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour);
 37e:	e9 de       	rcall	.-558    	; 0x152 <lcd_write_instruction_4f>
 380:	02 c0       	rjmp	.+4      	; 0x386 <updateLCDScreen+0x11e>
 382:	84 ed       	ldi	r24, 0xD4	; 212
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow);
 384:	e6 de       	rcall	.-564    	; 0x152 <lcd_write_instruction_4f>
 386:	ce 01       	movw	r24, r28
 388:	05 96       	adiw	r24, 0x05	; 5
 38a:	43 df       	rcall	.-378    	; 0x212 <lcd_write_string_4f>
}
 38c:	46 c0       	rjmp	.+140    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 38e:	ce 01       	movw	r24, r28
 390:	4a 96       	adiw	r24, 0x1a	; 26
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	89 e2       	ldi	r24, 0x29	; 41
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	9f 93       	push	r25
 39c:	8f 93       	push	r24
 39e:	9e 01       	movw	r18, r28
 3a0:	2f 5f       	subi	r18, 0xFF	; 255
 3a2:	3f 4f       	sbci	r19, 0xFF	; 255
 3a4:	3f 93       	push	r19
 3a6:	2f 93       	push	r18
 3a8:	9f 93       	push	r25
 3aa:	8f 93       	push	r24
 3ac:	85 e0       	ldi	r24, 0x05	; 5
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	9f 93       	push	r25
 3b2:	8f 93       	push	r24
 3b4:	1f 92       	push	r1
 3b6:	85 e1       	ldi	r24, 0x15	; 21
 3b8:	8f 93       	push	r24
 3ba:	ce 01       	movw	r24, r28
 3bc:	05 96       	adiw	r24, 0x05	; 5
 3be:	9f 93       	push	r25
 3c0:	8f 93       	push	r24
 3c2:	32 d1       	rcall	.+612    	; 0x628 <snprintf>
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 3ce:	c5 cf       	rjmp	.-118    	; 0x35a <updateLCDScreen+0xf2>
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	71 e0       	ldi	r23, 0x01	; 1
 3d4:	c7 01       	movw	r24, r14
 3d6:	fc d0       	rcall	.+504    	; 0x5d0 <strcmp>
 3d8:	89 2b       	or	r24, r25
 3da:	c9 f2       	breq	.-78     	; 0x38e <updateLCDScreen+0x126>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 3dc:	ce 01       	movw	r24, r28
 3de:	4a 96       	adiw	r24, 0x1a	; 26
 3e0:	9f 93       	push	r25
 3e2:	8f 93       	push	r24
 3e4:	ff 92       	push	r15
 3e6:	ef 92       	push	r14
 3e8:	49 97       	sbiw	r24, 0x19	; 25
 3ea:	9f 93       	push	r25
 3ec:	8f 93       	push	r24
 3ee:	89 e2       	ldi	r24, 0x29	; 41
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	9f 93       	push	r25
 3f4:	8f 93       	push	r24
 3f6:	85 e0       	ldi	r24, 0x05	; 5
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	9f 93       	push	r25
 3fc:	8f 93       	push	r24
 3fe:	1f 92       	push	r1
 400:	85 e1       	ldi	r24, 0x15	; 21
 402:	8f 93       	push	r24
 404:	ce 01       	movw	r24, r28
 406:	05 96       	adiw	r24, 0x05	; 5
 408:	9f 93       	push	r25
 40a:	8f 93       	push	r24
 40c:	0d d1       	rcall	.+538    	; 0x628 <snprintf>
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	a0 cf       	rjmp	.-192    	; 0x35a <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow);
}
 41a:	af 96       	adiw	r28, 0x2f	; 47
 41c:	0f b6       	in	r0, 0x3f	; 63
 41e:	f8 94       	cli
 420:	de bf       	out	0x3e, r29	; 62
 422:	0f be       	out	0x3f, r0	; 63
 424:	cd bf       	out	0x3d, r28	; 61
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	0f 91       	pop	r16
 42e:	ff 90       	pop	r15
 430:	ef 90       	pop	r14
 432:	df 90       	pop	r13
 434:	08 95       	ret

00000436 <L2Function>:
	
	L2Function(x, xAdd, y, yAdd);
}

void L2Function(uint8_t x, uint8_t * xAdd, uint8_t y, uint8_t * yAdd)
{
 436:	1f 93       	push	r17
 438:	cf 93       	push	r28
 43a:	df 93       	push	r29
 43c:	16 2f       	mov	r17, r22
 43e:	d4 2f       	mov	r29, r20
 440:	c2 2f       	mov	r28, r18
	updateLCDScreen(1, "L2 x: ", x, "NONE");		// x value
 442:	20 e0       	ldi	r18, 0x00	; 0
 444:	31 e0       	ldi	r19, 0x01	; 1
 446:	48 2f       	mov	r20, r24
 448:	6a e2       	ldi	r22, 0x2A	; 42
 44a:	71 e0       	ldi	r23, 0x01	; 1
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	0c df       	rcall	.-488    	; 0x268 <updateLCDScreen>
	updateLCDScreen(2, "L2 &x: ", xAdd, "NONE");	// x address
 450:	20 e0       	ldi	r18, 0x00	; 0
 452:	31 e0       	ldi	r19, 0x01	; 1
 454:	41 2f       	mov	r20, r17
 456:	61 e3       	ldi	r22, 0x31	; 49
 458:	71 e0       	ldi	r23, 0x01	; 1
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	05 df       	rcall	.-502    	; 0x268 <updateLCDScreen>
	updateLCDScreen(3, "L2 y: ", y, "NONE");		// y value
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	31 e0       	ldi	r19, 0x01	; 1
 462:	4d 2f       	mov	r20, r29
 464:	69 e3       	ldi	r22, 0x39	; 57
 466:	71 e0       	ldi	r23, 0x01	; 1
 468:	83 e0       	ldi	r24, 0x03	; 3
 46a:	fe de       	rcall	.-516    	; 0x268 <updateLCDScreen>
	updateLCDScreen(4, "L2 &y: ", yAdd, "NONE");	// y address
 46c:	20 e0       	ldi	r18, 0x00	; 0
 46e:	31 e0       	ldi	r19, 0x01	; 1
 470:	4c 2f       	mov	r20, r28
 472:	60 e4       	ldi	r22, 0x40	; 64
 474:	71 e0       	ldi	r23, 0x01	; 1
 476:	84 e0       	ldi	r24, 0x04	; 4
 478:	f7 de       	rcall	.-530    	; 0x268 <updateLCDScreen>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	8b e7       	ldi	r24, 0x7B	; 123
 47e:	92 e9       	ldi	r25, 0x92	; 146
 480:	21 50       	subi	r18, 0x01	; 1
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <L2Function+0x4a>
 488:	00 c0       	rjmp	.+0      	; 0x48a <L2Function+0x54>
 48a:	00 00       	nop

	_delay_ms(3000);
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	08 95       	ret

00000494 <L1Function>:
	return 0;
}


void L1Function(uint8_t x, uint8_t * xAdd, uint8_t y, uint8_t * yAdd)
{
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	cf 93       	push	r28
 49a:	df 93       	push	r29
 49c:	16 2f       	mov	r17, r22
 49e:	07 2f       	mov	r16, r23
 4a0:	e9 01       	movw	r28, r18
	x = 11;
	y = 72;
	*yAdd = 36;
 4a2:	84 e2       	ldi	r24, 0x24	; 36
 4a4:	88 83       	st	Y, r24
	updateLCDScreen(1, "L1 x: ", x, "NONE");		// x value
 4a6:	20 e0       	ldi	r18, 0x00	; 0
 4a8:	31 e0       	ldi	r19, 0x01	; 1
 4aa:	4b e0       	ldi	r20, 0x0B	; 11
 4ac:	68 e4       	ldi	r22, 0x48	; 72
 4ae:	71 e0       	ldi	r23, 0x01	; 1
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	da de       	rcall	.-588    	; 0x268 <updateLCDScreen>
	updateLCDScreen(2, "L1 &x: ", xAdd, "NONE");	// x address
 4b4:	20 e0       	ldi	r18, 0x00	; 0
 4b6:	31 e0       	ldi	r19, 0x01	; 1
 4b8:	41 2f       	mov	r20, r17
 4ba:	6f e4       	ldi	r22, 0x4F	; 79
 4bc:	71 e0       	ldi	r23, 0x01	; 1
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	d3 de       	rcall	.-602    	; 0x268 <updateLCDScreen>
 	updateLCDScreen(3, "L1 y: ", *yAdd, "NONE");	// y value taken from address
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	31 e0       	ldi	r19, 0x01	; 1
 4c6:	48 81       	ld	r20, Y
 4c8:	67 e5       	ldi	r22, 0x57	; 87
 4ca:	71 e0       	ldi	r23, 0x01	; 1
 4cc:	83 e0       	ldi	r24, 0x03	; 3
 4ce:	cc de       	rcall	.-616    	; 0x268 <updateLCDScreen>
 	updateLCDScreen(4, "L1 &y: ", yAdd, "NONE");	// y address
 4d0:	20 e0       	ldi	r18, 0x00	; 0
 4d2:	31 e0       	ldi	r19, 0x01	; 1
 4d4:	4c 2f       	mov	r20, r28
 4d6:	6e e5       	ldi	r22, 0x5E	; 94
 4d8:	71 e0       	ldi	r23, 0x01	; 1
 4da:	84 e0       	ldi	r24, 0x04	; 4
 4dc:	c5 de       	rcall	.-630    	; 0x268 <updateLCDScreen>
 4de:	2f ef       	ldi	r18, 0xFF	; 255
 4e0:	8b e7       	ldi	r24, 0x7B	; 123
 4e2:	92 e9       	ldi	r25, 0x92	; 146
 4e4:	21 50       	subi	r18, 0x01	; 1
 4e6:	80 40       	sbci	r24, 0x00	; 0
 4e8:	90 40       	sbci	r25, 0x00	; 0
 4ea:	e1 f7       	brne	.-8      	; 0x4e4 <L1Function+0x50>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <L1Function+0x5a>
 4ee:	00 00       	nop
	_delay_ms(3000);
	
	L2Function(x, xAdd, y, yAdd);
 4f0:	9e 01       	movw	r18, r28
 4f2:	48 e4       	ldi	r20, 0x48	; 72
 4f4:	61 2f       	mov	r22, r17
 4f6:	70 2f       	mov	r23, r16
 4f8:	8b e0       	ldi	r24, 0x0B	; 11
 4fa:	9d df       	rcall	.-198    	; 0x436 <L2Function>
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <main>:
void L1Function(uint8_t, uint8_t *, uint8_t, uint8_t *);
void L2Function(uint8_t, uint8_t *, uint8_t, uint8_t *);

/*-------------- Main function ----------------*/
int main(void)
{
 506:	ef 92       	push	r14
 508:	ff 92       	push	r15
 50a:	0f 93       	push	r16
 50c:	1f 93       	push	r17
 50e:	cf 93       	push	r28
 510:	df 93       	push	r29
 512:	00 d0       	rcall	.+0      	; 0x514 <main+0xe>
 514:	cd b7       	in	r28, 0x3d	; 61
 516:	de b7       	in	r29, 0x3e	; 62
	initLCD();
 518:	79 de       	rcall	.-782    	; 0x20c <initLCD>
	
	uint8_t x = 12;
 51a:	8c e0       	ldi	r24, 0x0C	; 12
 51c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t y = 38;
 51e:	86 e2       	ldi	r24, 0x26	; 38
 520:	8a 83       	std	Y+2, r24	; 0x02
	
	//updateLCDScreen(row on LCD, "Text 1", number, "Text 2");
	updateLCDScreen(1, "L0 x: ", x, "NONE");		// x value
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	31 e0       	ldi	r19, 0x01	; 1
 526:	4c e0       	ldi	r20, 0x0C	; 12
 528:	66 e6       	ldi	r22, 0x66	; 102
 52a:	71 e0       	ldi	r23, 0x01	; 1
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	9c de       	rcall	.-712    	; 0x268 <updateLCDScreen>
	updateLCDScreen(2, "L0 &x: ", &x, "NONE");		// x address
 530:	ce 01       	movw	r24, r28
 532:	01 96       	adiw	r24, 0x01	; 1
 534:	7c 01       	movw	r14, r24
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	31 e0       	ldi	r19, 0x01	; 1
 53a:	48 2f       	mov	r20, r24
 53c:	6d e6       	ldi	r22, 0x6D	; 109
 53e:	71 e0       	ldi	r23, 0x01	; 1
 540:	82 e0       	ldi	r24, 0x02	; 2
 542:	92 de       	rcall	.-732    	; 0x268 <updateLCDScreen>
 	updateLCDScreen(3, "L0 y: ", y, "NONE");		// y value
 544:	20 e0       	ldi	r18, 0x00	; 0
 546:	31 e0       	ldi	r19, 0x01	; 1
 548:	4a 81       	ldd	r20, Y+2	; 0x02
 54a:	65 e7       	ldi	r22, 0x75	; 117
 54c:	71 e0       	ldi	r23, 0x01	; 1
 54e:	83 e0       	ldi	r24, 0x03	; 3
 550:	8b de       	rcall	.-746    	; 0x268 <updateLCDScreen>
 	updateLCDScreen(4, "L0 &y: ", &y, "NONE");		// y address
 552:	8e 01       	movw	r16, r28
 554:	0e 5f       	subi	r16, 0xFE	; 254
 556:	1f 4f       	sbci	r17, 0xFF	; 255
 558:	20 e0       	ldi	r18, 0x00	; 0
 55a:	31 e0       	ldi	r19, 0x01	; 1
 55c:	40 2f       	mov	r20, r16
 55e:	6c e7       	ldi	r22, 0x7C	; 124
 560:	71 e0       	ldi	r23, 0x01	; 1
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	81 de       	rcall	.-766    	; 0x268 <updateLCDScreen>
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	2b e7       	ldi	r18, 0x7B	; 123
 56a:	82 e9       	ldi	r24, 0x92	; 146
 56c:	91 50       	subi	r25, 0x01	; 1
 56e:	20 40       	sbci	r18, 0x00	; 0
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <main+0x66>
 574:	00 c0       	rjmp	.+0      	; 0x576 <main+0x70>
	_delay_ms(3000);
	
	L1Function(x, &x, y, &y);
 576:	00 00       	nop
 578:	98 01       	movw	r18, r16
 57a:	4a 81       	ldd	r20, Y+2	; 0x02
 57c:	b7 01       	movw	r22, r14
 57e:	89 81       	ldd	r24, Y+1	; 0x01
 580:	89 df       	rcall	.-238    	; 0x494 <L1Function>
	
	updateLCDScreen(1, "L0 x: ", x, "NONE");		// x value
 582:	20 e0       	ldi	r18, 0x00	; 0
 584:	31 e0       	ldi	r19, 0x01	; 1
 586:	49 81       	ldd	r20, Y+1	; 0x01
 588:	66 e6       	ldi	r22, 0x66	; 102
 58a:	71 e0       	ldi	r23, 0x01	; 1
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	6c de       	rcall	.-808    	; 0x268 <updateLCDScreen>
	updateLCDScreen(2, "L0 &x: ", &x, "NONE");		// x address
 590:	20 e0       	ldi	r18, 0x00	; 0
 592:	31 e0       	ldi	r19, 0x01	; 1
 594:	4e 2d       	mov	r20, r14
 596:	6d e6       	ldi	r22, 0x6D	; 109
 598:	71 e0       	ldi	r23, 0x01	; 1
 59a:	82 e0       	ldi	r24, 0x02	; 2
 59c:	65 de       	rcall	.-822    	; 0x268 <updateLCDScreen>
	updateLCDScreen(3, "L0 y: ", y, "NONE");		// y value
 59e:	20 e0       	ldi	r18, 0x00	; 0
 5a0:	31 e0       	ldi	r19, 0x01	; 1
 5a2:	4a 81       	ldd	r20, Y+2	; 0x02
 5a4:	65 e7       	ldi	r22, 0x75	; 117
 5a6:	71 e0       	ldi	r23, 0x01	; 1
 5a8:	83 e0       	ldi	r24, 0x03	; 3
 5aa:	5e de       	rcall	.-836    	; 0x268 <updateLCDScreen>
	updateLCDScreen(4, "L0 &y: ", &y, "NONE");		// y address
 5ac:	20 e0       	ldi	r18, 0x00	; 0
 5ae:	31 e0       	ldi	r19, 0x01	; 1
 5b0:	40 2f       	mov	r20, r16
 5b2:	6c e7       	ldi	r22, 0x7C	; 124
 5b4:	71 e0       	ldi	r23, 0x01	; 1
 5b6:	84 e0       	ldi	r24, 0x04	; 4
 5b8:	57 de       	rcall	.-850    	; 0x268 <updateLCDScreen>
 5ba:	80 e0       	ldi	r24, 0x00	; 0
	
	
	return 0;
}
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0f 90       	pop	r0
 5c0:	0f 90       	pop	r0
 5c2:	df 91       	pop	r29
 5c4:	cf 91       	pop	r28
 5c6:	1f 91       	pop	r17
 5c8:	0f 91       	pop	r16
 5ca:	ff 90       	pop	r15
 5cc:	ef 90       	pop	r14
 5ce:	08 95       	ret

000005d0 <strcmp>:
 5d0:	fb 01       	movw	r30, r22
 5d2:	dc 01       	movw	r26, r24
 5d4:	8d 91       	ld	r24, X+
 5d6:	01 90       	ld	r0, Z+
 5d8:	80 19       	sub	r24, r0
 5da:	01 10       	cpse	r0, r1
 5dc:	d9 f3       	breq	.-10     	; 0x5d4 <strcmp+0x4>
 5de:	99 0b       	sbc	r25, r25
 5e0:	08 95       	ret

000005e2 <__itoa_ncheck>:
 5e2:	bb 27       	eor	r27, r27
 5e4:	4a 30       	cpi	r20, 0x0A	; 10
 5e6:	31 f4       	brne	.+12     	; 0x5f4 <__itoa_ncheck+0x12>
 5e8:	99 23       	and	r25, r25
 5ea:	22 f4       	brpl	.+8      	; 0x5f4 <__itoa_ncheck+0x12>
 5ec:	bd e2       	ldi	r27, 0x2D	; 45
 5ee:	90 95       	com	r25
 5f0:	81 95       	neg	r24
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	01 c0       	rjmp	.+2      	; 0x5f8 <__utoa_common>

000005f6 <__utoa_ncheck>:
 5f6:	bb 27       	eor	r27, r27

000005f8 <__utoa_common>:
 5f8:	fb 01       	movw	r30, r22
 5fa:	55 27       	eor	r21, r21
 5fc:	aa 27       	eor	r26, r26
 5fe:	88 0f       	add	r24, r24
 600:	99 1f       	adc	r25, r25
 602:	aa 1f       	adc	r26, r26
 604:	a4 17       	cp	r26, r20
 606:	10 f0       	brcs	.+4      	; 0x60c <__utoa_common+0x14>
 608:	a4 1b       	sub	r26, r20
 60a:	83 95       	inc	r24
 60c:	50 51       	subi	r21, 0x10	; 16
 60e:	b9 f7       	brne	.-18     	; 0x5fe <__utoa_common+0x6>
 610:	a0 5d       	subi	r26, 0xD0	; 208
 612:	aa 33       	cpi	r26, 0x3A	; 58
 614:	08 f0       	brcs	.+2      	; 0x618 <__utoa_common+0x20>
 616:	a9 5d       	subi	r26, 0xD9	; 217
 618:	a1 93       	st	Z+, r26
 61a:	00 97       	sbiw	r24, 0x00	; 0
 61c:	79 f7       	brne	.-34     	; 0x5fc <__utoa_common+0x4>
 61e:	b1 11       	cpse	r27, r1
 620:	b1 93       	st	Z+, r27
 622:	11 92       	st	Z+, r1
 624:	cb 01       	movw	r24, r22
 626:	15 c2       	rjmp	.+1066   	; 0xa52 <strrev>

00000628 <snprintf>:
 628:	ae e0       	ldi	r26, 0x0E	; 14
 62a:	b0 e0       	ldi	r27, 0x00	; 0
 62c:	e9 e1       	ldi	r30, 0x19	; 25
 62e:	f3 e0       	ldi	r31, 0x03	; 3
 630:	c8 c2       	rjmp	.+1424   	; 0xbc2 <__prologue_saves__+0x1c>
 632:	0d 89       	ldd	r16, Y+21	; 0x15
 634:	1e 89       	ldd	r17, Y+22	; 0x16
 636:	8f 89       	ldd	r24, Y+23	; 0x17
 638:	98 8d       	ldd	r25, Y+24	; 0x18
 63a:	26 e0       	ldi	r18, 0x06	; 6
 63c:	2c 83       	std	Y+4, r18	; 0x04
 63e:	1a 83       	std	Y+2, r17	; 0x02
 640:	09 83       	std	Y+1, r16	; 0x01
 642:	97 ff       	sbrs	r25, 7
 644:	02 c0       	rjmp	.+4      	; 0x64a <snprintf+0x22>
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	90 e8       	ldi	r25, 0x80	; 128
 64a:	01 97       	sbiw	r24, 0x01	; 1
 64c:	9e 83       	std	Y+6, r25	; 0x06
 64e:	8d 83       	std	Y+5, r24	; 0x05
 650:	ae 01       	movw	r20, r28
 652:	45 5e       	subi	r20, 0xE5	; 229
 654:	5f 4f       	sbci	r21, 0xFF	; 255
 656:	69 8d       	ldd	r22, Y+25	; 0x19
 658:	7a 8d       	ldd	r23, Y+26	; 0x1a
 65a:	ce 01       	movw	r24, r28
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	11 d0       	rcall	.+34     	; 0x682 <vfprintf>
 660:	4d 81       	ldd	r20, Y+5	; 0x05
 662:	5e 81       	ldd	r21, Y+6	; 0x06
 664:	57 fd       	sbrc	r21, 7
 666:	0a c0       	rjmp	.+20     	; 0x67c <snprintf+0x54>
 668:	2f 81       	ldd	r18, Y+7	; 0x07
 66a:	38 85       	ldd	r19, Y+8	; 0x08
 66c:	42 17       	cp	r20, r18
 66e:	53 07       	cpc	r21, r19
 670:	0c f4       	brge	.+2      	; 0x674 <snprintf+0x4c>
 672:	9a 01       	movw	r18, r20
 674:	f8 01       	movw	r30, r16
 676:	e2 0f       	add	r30, r18
 678:	f3 1f       	adc	r31, r19
 67a:	10 82       	st	Z, r1
 67c:	2e 96       	adiw	r28, 0x0e	; 14
 67e:	e4 e0       	ldi	r30, 0x04	; 4
 680:	bc c2       	rjmp	.+1400   	; 0xbfa <__epilogue_restores__+0x1c>

00000682 <vfprintf>:
 682:	ab e0       	ldi	r26, 0x0B	; 11
 684:	b0 e0       	ldi	r27, 0x00	; 0
 686:	e6 e4       	ldi	r30, 0x46	; 70
 688:	f3 e0       	ldi	r31, 0x03	; 3
 68a:	8d c2       	rjmp	.+1306   	; 0xba6 <__prologue_saves__>
 68c:	6c 01       	movw	r12, r24
 68e:	7b 01       	movw	r14, r22
 690:	8a 01       	movw	r16, r20
 692:	fc 01       	movw	r30, r24
 694:	17 82       	std	Z+7, r1	; 0x07
 696:	16 82       	std	Z+6, r1	; 0x06
 698:	83 81       	ldd	r24, Z+3	; 0x03
 69a:	81 ff       	sbrs	r24, 1
 69c:	bf c1       	rjmp	.+894    	; 0xa1c <__stack+0x11d>
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	3c 01       	movw	r6, r24
 6a4:	f6 01       	movw	r30, r12
 6a6:	93 81       	ldd	r25, Z+3	; 0x03
 6a8:	f7 01       	movw	r30, r14
 6aa:	93 fd       	sbrc	r25, 3
 6ac:	85 91       	lpm	r24, Z+
 6ae:	93 ff       	sbrs	r25, 3
 6b0:	81 91       	ld	r24, Z+
 6b2:	7f 01       	movw	r14, r30
 6b4:	88 23       	and	r24, r24
 6b6:	09 f4       	brne	.+2      	; 0x6ba <vfprintf+0x38>
 6b8:	ad c1       	rjmp	.+858    	; 0xa14 <__stack+0x115>
 6ba:	85 32       	cpi	r24, 0x25	; 37
 6bc:	39 f4       	brne	.+14     	; 0x6cc <vfprintf+0x4a>
 6be:	93 fd       	sbrc	r25, 3
 6c0:	85 91       	lpm	r24, Z+
 6c2:	93 ff       	sbrs	r25, 3
 6c4:	81 91       	ld	r24, Z+
 6c6:	7f 01       	movw	r14, r30
 6c8:	85 32       	cpi	r24, 0x25	; 37
 6ca:	21 f4       	brne	.+8      	; 0x6d4 <vfprintf+0x52>
 6cc:	b6 01       	movw	r22, r12
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	d0 d1       	rcall	.+928    	; 0xa72 <fputc>
 6d2:	e8 cf       	rjmp	.-48     	; 0x6a4 <vfprintf+0x22>
 6d4:	91 2c       	mov	r9, r1
 6d6:	21 2c       	mov	r2, r1
 6d8:	31 2c       	mov	r3, r1
 6da:	ff e1       	ldi	r31, 0x1F	; 31
 6dc:	f3 15       	cp	r31, r3
 6de:	d8 f0       	brcs	.+54     	; 0x716 <vfprintf+0x94>
 6e0:	8b 32       	cpi	r24, 0x2B	; 43
 6e2:	79 f0       	breq	.+30     	; 0x702 <vfprintf+0x80>
 6e4:	38 f4       	brcc	.+14     	; 0x6f4 <vfprintf+0x72>
 6e6:	80 32       	cpi	r24, 0x20	; 32
 6e8:	79 f0       	breq	.+30     	; 0x708 <vfprintf+0x86>
 6ea:	83 32       	cpi	r24, 0x23	; 35
 6ec:	a1 f4       	brne	.+40     	; 0x716 <vfprintf+0x94>
 6ee:	23 2d       	mov	r18, r3
 6f0:	20 61       	ori	r18, 0x10	; 16
 6f2:	1d c0       	rjmp	.+58     	; 0x72e <vfprintf+0xac>
 6f4:	8d 32       	cpi	r24, 0x2D	; 45
 6f6:	61 f0       	breq	.+24     	; 0x710 <vfprintf+0x8e>
 6f8:	80 33       	cpi	r24, 0x30	; 48
 6fa:	69 f4       	brne	.+26     	; 0x716 <vfprintf+0x94>
 6fc:	23 2d       	mov	r18, r3
 6fe:	21 60       	ori	r18, 0x01	; 1
 700:	16 c0       	rjmp	.+44     	; 0x72e <vfprintf+0xac>
 702:	83 2d       	mov	r24, r3
 704:	82 60       	ori	r24, 0x02	; 2
 706:	38 2e       	mov	r3, r24
 708:	e3 2d       	mov	r30, r3
 70a:	e4 60       	ori	r30, 0x04	; 4
 70c:	3e 2e       	mov	r3, r30
 70e:	2a c0       	rjmp	.+84     	; 0x764 <vfprintf+0xe2>
 710:	f3 2d       	mov	r31, r3
 712:	f8 60       	ori	r31, 0x08	; 8
 714:	1d c0       	rjmp	.+58     	; 0x750 <vfprintf+0xce>
 716:	37 fc       	sbrc	r3, 7
 718:	2d c0       	rjmp	.+90     	; 0x774 <vfprintf+0xf2>
 71a:	20 ed       	ldi	r18, 0xD0	; 208
 71c:	28 0f       	add	r18, r24
 71e:	2a 30       	cpi	r18, 0x0A	; 10
 720:	40 f0       	brcs	.+16     	; 0x732 <vfprintf+0xb0>
 722:	8e 32       	cpi	r24, 0x2E	; 46
 724:	b9 f4       	brne	.+46     	; 0x754 <vfprintf+0xd2>
 726:	36 fc       	sbrc	r3, 6
 728:	75 c1       	rjmp	.+746    	; 0xa14 <__stack+0x115>
 72a:	23 2d       	mov	r18, r3
 72c:	20 64       	ori	r18, 0x40	; 64
 72e:	32 2e       	mov	r3, r18
 730:	19 c0       	rjmp	.+50     	; 0x764 <vfprintf+0xe2>
 732:	36 fe       	sbrs	r3, 6
 734:	06 c0       	rjmp	.+12     	; 0x742 <vfprintf+0xc0>
 736:	8a e0       	ldi	r24, 0x0A	; 10
 738:	98 9e       	mul	r9, r24
 73a:	20 0d       	add	r18, r0
 73c:	11 24       	eor	r1, r1
 73e:	92 2e       	mov	r9, r18
 740:	11 c0       	rjmp	.+34     	; 0x764 <vfprintf+0xe2>
 742:	ea e0       	ldi	r30, 0x0A	; 10
 744:	2e 9e       	mul	r2, r30
 746:	20 0d       	add	r18, r0
 748:	11 24       	eor	r1, r1
 74a:	22 2e       	mov	r2, r18
 74c:	f3 2d       	mov	r31, r3
 74e:	f0 62       	ori	r31, 0x20	; 32
 750:	3f 2e       	mov	r3, r31
 752:	08 c0       	rjmp	.+16     	; 0x764 <vfprintf+0xe2>
 754:	8c 36       	cpi	r24, 0x6C	; 108
 756:	21 f4       	brne	.+8      	; 0x760 <vfprintf+0xde>
 758:	83 2d       	mov	r24, r3
 75a:	80 68       	ori	r24, 0x80	; 128
 75c:	38 2e       	mov	r3, r24
 75e:	02 c0       	rjmp	.+4      	; 0x764 <vfprintf+0xe2>
 760:	88 36       	cpi	r24, 0x68	; 104
 762:	41 f4       	brne	.+16     	; 0x774 <vfprintf+0xf2>
 764:	f7 01       	movw	r30, r14
 766:	93 fd       	sbrc	r25, 3
 768:	85 91       	lpm	r24, Z+
 76a:	93 ff       	sbrs	r25, 3
 76c:	81 91       	ld	r24, Z+
 76e:	7f 01       	movw	r14, r30
 770:	81 11       	cpse	r24, r1
 772:	b3 cf       	rjmp	.-154    	; 0x6da <vfprintf+0x58>
 774:	98 2f       	mov	r25, r24
 776:	9f 7d       	andi	r25, 0xDF	; 223
 778:	95 54       	subi	r25, 0x45	; 69
 77a:	93 30       	cpi	r25, 0x03	; 3
 77c:	28 f4       	brcc	.+10     	; 0x788 <vfprintf+0x106>
 77e:	0c 5f       	subi	r16, 0xFC	; 252
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	9f e3       	ldi	r25, 0x3F	; 63
 784:	99 83       	std	Y+1, r25	; 0x01
 786:	0d c0       	rjmp	.+26     	; 0x7a2 <vfprintf+0x120>
 788:	83 36       	cpi	r24, 0x63	; 99
 78a:	31 f0       	breq	.+12     	; 0x798 <vfprintf+0x116>
 78c:	83 37       	cpi	r24, 0x73	; 115
 78e:	71 f0       	breq	.+28     	; 0x7ac <vfprintf+0x12a>
 790:	83 35       	cpi	r24, 0x53	; 83
 792:	09 f0       	breq	.+2      	; 0x796 <vfprintf+0x114>
 794:	55 c0       	rjmp	.+170    	; 0x840 <vfprintf+0x1be>
 796:	20 c0       	rjmp	.+64     	; 0x7d8 <vfprintf+0x156>
 798:	f8 01       	movw	r30, r16
 79a:	80 81       	ld	r24, Z
 79c:	89 83       	std	Y+1, r24	; 0x01
 79e:	0e 5f       	subi	r16, 0xFE	; 254
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	88 24       	eor	r8, r8
 7a4:	83 94       	inc	r8
 7a6:	91 2c       	mov	r9, r1
 7a8:	53 01       	movw	r10, r6
 7aa:	12 c0       	rjmp	.+36     	; 0x7d0 <vfprintf+0x14e>
 7ac:	28 01       	movw	r4, r16
 7ae:	f2 e0       	ldi	r31, 0x02	; 2
 7b0:	4f 0e       	add	r4, r31
 7b2:	51 1c       	adc	r5, r1
 7b4:	f8 01       	movw	r30, r16
 7b6:	a0 80       	ld	r10, Z
 7b8:	b1 80       	ldd	r11, Z+1	; 0x01
 7ba:	36 fe       	sbrs	r3, 6
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <vfprintf+0x142>
 7be:	69 2d       	mov	r22, r9
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0x146>
 7c4:	6f ef       	ldi	r22, 0xFF	; 255
 7c6:	7f ef       	ldi	r23, 0xFF	; 255
 7c8:	c5 01       	movw	r24, r10
 7ca:	38 d1       	rcall	.+624    	; 0xa3c <strnlen>
 7cc:	4c 01       	movw	r8, r24
 7ce:	82 01       	movw	r16, r4
 7d0:	f3 2d       	mov	r31, r3
 7d2:	ff 77       	andi	r31, 0x7F	; 127
 7d4:	3f 2e       	mov	r3, r31
 7d6:	15 c0       	rjmp	.+42     	; 0x802 <vfprintf+0x180>
 7d8:	28 01       	movw	r4, r16
 7da:	22 e0       	ldi	r18, 0x02	; 2
 7dc:	42 0e       	add	r4, r18
 7de:	51 1c       	adc	r5, r1
 7e0:	f8 01       	movw	r30, r16
 7e2:	a0 80       	ld	r10, Z
 7e4:	b1 80       	ldd	r11, Z+1	; 0x01
 7e6:	36 fe       	sbrs	r3, 6
 7e8:	03 c0       	rjmp	.+6      	; 0x7f0 <vfprintf+0x16e>
 7ea:	69 2d       	mov	r22, r9
 7ec:	70 e0       	ldi	r23, 0x00	; 0
 7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <vfprintf+0x172>
 7f0:	6f ef       	ldi	r22, 0xFF	; 255
 7f2:	7f ef       	ldi	r23, 0xFF	; 255
 7f4:	c5 01       	movw	r24, r10
 7f6:	17 d1       	rcall	.+558    	; 0xa26 <strnlen_P>
 7f8:	4c 01       	movw	r8, r24
 7fa:	f3 2d       	mov	r31, r3
 7fc:	f0 68       	ori	r31, 0x80	; 128
 7fe:	3f 2e       	mov	r3, r31
 800:	82 01       	movw	r16, r4
 802:	33 fc       	sbrc	r3, 3
 804:	19 c0       	rjmp	.+50     	; 0x838 <vfprintf+0x1b6>
 806:	82 2d       	mov	r24, r2
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	88 16       	cp	r8, r24
 80c:	99 06       	cpc	r9, r25
 80e:	a0 f4       	brcc	.+40     	; 0x838 <vfprintf+0x1b6>
 810:	b6 01       	movw	r22, r12
 812:	80 e2       	ldi	r24, 0x20	; 32
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	2d d1       	rcall	.+602    	; 0xa72 <fputc>
 818:	2a 94       	dec	r2
 81a:	f5 cf       	rjmp	.-22     	; 0x806 <vfprintf+0x184>
 81c:	f5 01       	movw	r30, r10
 81e:	37 fc       	sbrc	r3, 7
 820:	85 91       	lpm	r24, Z+
 822:	37 fe       	sbrs	r3, 7
 824:	81 91       	ld	r24, Z+
 826:	5f 01       	movw	r10, r30
 828:	b6 01       	movw	r22, r12
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	22 d1       	rcall	.+580    	; 0xa72 <fputc>
 82e:	21 10       	cpse	r2, r1
 830:	2a 94       	dec	r2
 832:	21 e0       	ldi	r18, 0x01	; 1
 834:	82 1a       	sub	r8, r18
 836:	91 08       	sbc	r9, r1
 838:	81 14       	cp	r8, r1
 83a:	91 04       	cpc	r9, r1
 83c:	79 f7       	brne	.-34     	; 0x81c <vfprintf+0x19a>
 83e:	e1 c0       	rjmp	.+450    	; 0xa02 <__stack+0x103>
 840:	84 36       	cpi	r24, 0x64	; 100
 842:	11 f0       	breq	.+4      	; 0x848 <vfprintf+0x1c6>
 844:	89 36       	cpi	r24, 0x69	; 105
 846:	39 f5       	brne	.+78     	; 0x896 <vfprintf+0x214>
 848:	f8 01       	movw	r30, r16
 84a:	37 fe       	sbrs	r3, 7
 84c:	07 c0       	rjmp	.+14     	; 0x85c <vfprintf+0x1da>
 84e:	60 81       	ld	r22, Z
 850:	71 81       	ldd	r23, Z+1	; 0x01
 852:	82 81       	ldd	r24, Z+2	; 0x02
 854:	93 81       	ldd	r25, Z+3	; 0x03
 856:	0c 5f       	subi	r16, 0xFC	; 252
 858:	1f 4f       	sbci	r17, 0xFF	; 255
 85a:	08 c0       	rjmp	.+16     	; 0x86c <vfprintf+0x1ea>
 85c:	60 81       	ld	r22, Z
 85e:	71 81       	ldd	r23, Z+1	; 0x01
 860:	07 2e       	mov	r0, r23
 862:	00 0c       	add	r0, r0
 864:	88 0b       	sbc	r24, r24
 866:	99 0b       	sbc	r25, r25
 868:	0e 5f       	subi	r16, 0xFE	; 254
 86a:	1f 4f       	sbci	r17, 0xFF	; 255
 86c:	f3 2d       	mov	r31, r3
 86e:	ff 76       	andi	r31, 0x6F	; 111
 870:	3f 2e       	mov	r3, r31
 872:	97 ff       	sbrs	r25, 7
 874:	09 c0       	rjmp	.+18     	; 0x888 <vfprintf+0x206>
 876:	90 95       	com	r25
 878:	80 95       	com	r24
 87a:	70 95       	com	r23
 87c:	61 95       	neg	r22
 87e:	7f 4f       	sbci	r23, 0xFF	; 255
 880:	8f 4f       	sbci	r24, 0xFF	; 255
 882:	9f 4f       	sbci	r25, 0xFF	; 255
 884:	f0 68       	ori	r31, 0x80	; 128
 886:	3f 2e       	mov	r3, r31
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	a3 01       	movw	r20, r6
 88e:	2d d1       	rcall	.+602    	; 0xaea <__ultoa_invert>
 890:	88 2e       	mov	r8, r24
 892:	86 18       	sub	r8, r6
 894:	44 c0       	rjmp	.+136    	; 0x91e <__stack+0x1f>
 896:	85 37       	cpi	r24, 0x75	; 117
 898:	31 f4       	brne	.+12     	; 0x8a6 <vfprintf+0x224>
 89a:	23 2d       	mov	r18, r3
 89c:	2f 7e       	andi	r18, 0xEF	; 239
 89e:	b2 2e       	mov	r11, r18
 8a0:	2a e0       	ldi	r18, 0x0A	; 10
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	25 c0       	rjmp	.+74     	; 0x8f0 <vfprintf+0x26e>
 8a6:	93 2d       	mov	r25, r3
 8a8:	99 7f       	andi	r25, 0xF9	; 249
 8aa:	b9 2e       	mov	r11, r25
 8ac:	8f 36       	cpi	r24, 0x6F	; 111
 8ae:	c1 f0       	breq	.+48     	; 0x8e0 <vfprintf+0x25e>
 8b0:	18 f4       	brcc	.+6      	; 0x8b8 <vfprintf+0x236>
 8b2:	88 35       	cpi	r24, 0x58	; 88
 8b4:	79 f0       	breq	.+30     	; 0x8d4 <vfprintf+0x252>
 8b6:	ae c0       	rjmp	.+348    	; 0xa14 <__stack+0x115>
 8b8:	80 37       	cpi	r24, 0x70	; 112
 8ba:	19 f0       	breq	.+6      	; 0x8c2 <vfprintf+0x240>
 8bc:	88 37       	cpi	r24, 0x78	; 120
 8be:	21 f0       	breq	.+8      	; 0x8c8 <vfprintf+0x246>
 8c0:	a9 c0       	rjmp	.+338    	; 0xa14 <__stack+0x115>
 8c2:	e9 2f       	mov	r30, r25
 8c4:	e0 61       	ori	r30, 0x10	; 16
 8c6:	be 2e       	mov	r11, r30
 8c8:	b4 fe       	sbrs	r11, 4
 8ca:	0d c0       	rjmp	.+26     	; 0x8e6 <vfprintf+0x264>
 8cc:	fb 2d       	mov	r31, r11
 8ce:	f4 60       	ori	r31, 0x04	; 4
 8d0:	bf 2e       	mov	r11, r31
 8d2:	09 c0       	rjmp	.+18     	; 0x8e6 <vfprintf+0x264>
 8d4:	34 fe       	sbrs	r3, 4
 8d6:	0a c0       	rjmp	.+20     	; 0x8ec <vfprintf+0x26a>
 8d8:	29 2f       	mov	r18, r25
 8da:	26 60       	ori	r18, 0x06	; 6
 8dc:	b2 2e       	mov	r11, r18
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <vfprintf+0x26a>
 8e0:	28 e0       	ldi	r18, 0x08	; 8
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	05 c0       	rjmp	.+10     	; 0x8f0 <vfprintf+0x26e>
 8e6:	20 e1       	ldi	r18, 0x10	; 16
 8e8:	30 e0       	ldi	r19, 0x00	; 0
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <vfprintf+0x26e>
 8ec:	20 e1       	ldi	r18, 0x10	; 16
 8ee:	32 e0       	ldi	r19, 0x02	; 2
 8f0:	f8 01       	movw	r30, r16
 8f2:	b7 fe       	sbrs	r11, 7
 8f4:	07 c0       	rjmp	.+14     	; 0x904 <__stack+0x5>
 8f6:	60 81       	ld	r22, Z
 8f8:	71 81       	ldd	r23, Z+1	; 0x01
 8fa:	82 81       	ldd	r24, Z+2	; 0x02
 8fc:	93 81       	ldd	r25, Z+3	; 0x03
 8fe:	0c 5f       	subi	r16, 0xFC	; 252
 900:	1f 4f       	sbci	r17, 0xFF	; 255
 902:	06 c0       	rjmp	.+12     	; 0x910 <__stack+0x11>
 904:	60 81       	ld	r22, Z
 906:	71 81       	ldd	r23, Z+1	; 0x01
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 5f       	subi	r16, 0xFE	; 254
 90e:	1f 4f       	sbci	r17, 0xFF	; 255
 910:	a3 01       	movw	r20, r6
 912:	eb d0       	rcall	.+470    	; 0xaea <__ultoa_invert>
 914:	88 2e       	mov	r8, r24
 916:	86 18       	sub	r8, r6
 918:	fb 2d       	mov	r31, r11
 91a:	ff 77       	andi	r31, 0x7F	; 127
 91c:	3f 2e       	mov	r3, r31
 91e:	36 fe       	sbrs	r3, 6
 920:	0d c0       	rjmp	.+26     	; 0x93c <__stack+0x3d>
 922:	23 2d       	mov	r18, r3
 924:	2e 7f       	andi	r18, 0xFE	; 254
 926:	a2 2e       	mov	r10, r18
 928:	89 14       	cp	r8, r9
 92a:	58 f4       	brcc	.+22     	; 0x942 <__stack+0x43>
 92c:	34 fe       	sbrs	r3, 4
 92e:	0b c0       	rjmp	.+22     	; 0x946 <__stack+0x47>
 930:	32 fc       	sbrc	r3, 2
 932:	09 c0       	rjmp	.+18     	; 0x946 <__stack+0x47>
 934:	83 2d       	mov	r24, r3
 936:	8e 7e       	andi	r24, 0xEE	; 238
 938:	a8 2e       	mov	r10, r24
 93a:	05 c0       	rjmp	.+10     	; 0x946 <__stack+0x47>
 93c:	b8 2c       	mov	r11, r8
 93e:	a3 2c       	mov	r10, r3
 940:	03 c0       	rjmp	.+6      	; 0x948 <__stack+0x49>
 942:	b8 2c       	mov	r11, r8
 944:	01 c0       	rjmp	.+2      	; 0x948 <__stack+0x49>
 946:	b9 2c       	mov	r11, r9
 948:	a4 fe       	sbrs	r10, 4
 94a:	0f c0       	rjmp	.+30     	; 0x96a <__stack+0x6b>
 94c:	fe 01       	movw	r30, r28
 94e:	e8 0d       	add	r30, r8
 950:	f1 1d       	adc	r31, r1
 952:	80 81       	ld	r24, Z
 954:	80 33       	cpi	r24, 0x30	; 48
 956:	21 f4       	brne	.+8      	; 0x960 <__stack+0x61>
 958:	9a 2d       	mov	r25, r10
 95a:	99 7e       	andi	r25, 0xE9	; 233
 95c:	a9 2e       	mov	r10, r25
 95e:	09 c0       	rjmp	.+18     	; 0x972 <__stack+0x73>
 960:	a2 fe       	sbrs	r10, 2
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x71>
 964:	b3 94       	inc	r11
 966:	b3 94       	inc	r11
 968:	04 c0       	rjmp	.+8      	; 0x972 <__stack+0x73>
 96a:	8a 2d       	mov	r24, r10
 96c:	86 78       	andi	r24, 0x86	; 134
 96e:	09 f0       	breq	.+2      	; 0x972 <__stack+0x73>
 970:	b3 94       	inc	r11
 972:	a3 fc       	sbrc	r10, 3
 974:	10 c0       	rjmp	.+32     	; 0x996 <__stack+0x97>
 976:	a0 fe       	sbrs	r10, 0
 978:	06 c0       	rjmp	.+12     	; 0x986 <__stack+0x87>
 97a:	b2 14       	cp	r11, r2
 97c:	80 f4       	brcc	.+32     	; 0x99e <__stack+0x9f>
 97e:	28 0c       	add	r2, r8
 980:	92 2c       	mov	r9, r2
 982:	9b 18       	sub	r9, r11
 984:	0d c0       	rjmp	.+26     	; 0x9a0 <__stack+0xa1>
 986:	b2 14       	cp	r11, r2
 988:	58 f4       	brcc	.+22     	; 0x9a0 <__stack+0xa1>
 98a:	b6 01       	movw	r22, r12
 98c:	80 e2       	ldi	r24, 0x20	; 32
 98e:	90 e0       	ldi	r25, 0x00	; 0
 990:	70 d0       	rcall	.+224    	; 0xa72 <fputc>
 992:	b3 94       	inc	r11
 994:	f8 cf       	rjmp	.-16     	; 0x986 <__stack+0x87>
 996:	b2 14       	cp	r11, r2
 998:	18 f4       	brcc	.+6      	; 0x9a0 <__stack+0xa1>
 99a:	2b 18       	sub	r2, r11
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0xa3>
 99e:	98 2c       	mov	r9, r8
 9a0:	21 2c       	mov	r2, r1
 9a2:	a4 fe       	sbrs	r10, 4
 9a4:	0f c0       	rjmp	.+30     	; 0x9c4 <__stack+0xc5>
 9a6:	b6 01       	movw	r22, r12
 9a8:	80 e3       	ldi	r24, 0x30	; 48
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	62 d0       	rcall	.+196    	; 0xa72 <fputc>
 9ae:	a2 fe       	sbrs	r10, 2
 9b0:	16 c0       	rjmp	.+44     	; 0x9de <__stack+0xdf>
 9b2:	a1 fc       	sbrc	r10, 1
 9b4:	03 c0       	rjmp	.+6      	; 0x9bc <__stack+0xbd>
 9b6:	88 e7       	ldi	r24, 0x78	; 120
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	02 c0       	rjmp	.+4      	; 0x9c0 <__stack+0xc1>
 9bc:	88 e5       	ldi	r24, 0x58	; 88
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	b6 01       	movw	r22, r12
 9c2:	0c c0       	rjmp	.+24     	; 0x9dc <__stack+0xdd>
 9c4:	8a 2d       	mov	r24, r10
 9c6:	86 78       	andi	r24, 0x86	; 134
 9c8:	51 f0       	breq	.+20     	; 0x9de <__stack+0xdf>
 9ca:	a1 fe       	sbrs	r10, 1
 9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <__stack+0xd3>
 9ce:	8b e2       	ldi	r24, 0x2B	; 43
 9d0:	01 c0       	rjmp	.+2      	; 0x9d4 <__stack+0xd5>
 9d2:	80 e2       	ldi	r24, 0x20	; 32
 9d4:	a7 fc       	sbrc	r10, 7
 9d6:	8d e2       	ldi	r24, 0x2D	; 45
 9d8:	b6 01       	movw	r22, r12
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	4a d0       	rcall	.+148    	; 0xa72 <fputc>
 9de:	89 14       	cp	r8, r9
 9e0:	30 f4       	brcc	.+12     	; 0x9ee <__stack+0xef>
 9e2:	b6 01       	movw	r22, r12
 9e4:	80 e3       	ldi	r24, 0x30	; 48
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	44 d0       	rcall	.+136    	; 0xa72 <fputc>
 9ea:	9a 94       	dec	r9
 9ec:	f8 cf       	rjmp	.-16     	; 0x9de <__stack+0xdf>
 9ee:	8a 94       	dec	r8
 9f0:	f3 01       	movw	r30, r6
 9f2:	e8 0d       	add	r30, r8
 9f4:	f1 1d       	adc	r31, r1
 9f6:	80 81       	ld	r24, Z
 9f8:	b6 01       	movw	r22, r12
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	3a d0       	rcall	.+116    	; 0xa72 <fputc>
 9fe:	81 10       	cpse	r8, r1
 a00:	f6 cf       	rjmp	.-20     	; 0x9ee <__stack+0xef>
 a02:	22 20       	and	r2, r2
 a04:	09 f4       	brne	.+2      	; 0xa08 <__stack+0x109>
 a06:	4e ce       	rjmp	.-868    	; 0x6a4 <vfprintf+0x22>
 a08:	b6 01       	movw	r22, r12
 a0a:	80 e2       	ldi	r24, 0x20	; 32
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	31 d0       	rcall	.+98     	; 0xa72 <fputc>
 a10:	2a 94       	dec	r2
 a12:	f7 cf       	rjmp	.-18     	; 0xa02 <__stack+0x103>
 a14:	f6 01       	movw	r30, r12
 a16:	86 81       	ldd	r24, Z+6	; 0x06
 a18:	97 81       	ldd	r25, Z+7	; 0x07
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__stack+0x121>
 a1c:	8f ef       	ldi	r24, 0xFF	; 255
 a1e:	9f ef       	ldi	r25, 0xFF	; 255
 a20:	2b 96       	adiw	r28, 0x0b	; 11
 a22:	e2 e1       	ldi	r30, 0x12	; 18
 a24:	dc c0       	rjmp	.+440    	; 0xbde <__epilogue_restores__>

00000a26 <strnlen_P>:
 a26:	fc 01       	movw	r30, r24
 a28:	05 90       	lpm	r0, Z+
 a2a:	61 50       	subi	r22, 0x01	; 1
 a2c:	70 40       	sbci	r23, 0x00	; 0
 a2e:	01 10       	cpse	r0, r1
 a30:	d8 f7       	brcc	.-10     	; 0xa28 <strnlen_P+0x2>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	8e 0f       	add	r24, r30
 a38:	9f 1f       	adc	r25, r31
 a3a:	08 95       	ret

00000a3c <strnlen>:
 a3c:	fc 01       	movw	r30, r24
 a3e:	61 50       	subi	r22, 0x01	; 1
 a40:	70 40       	sbci	r23, 0x00	; 0
 a42:	01 90       	ld	r0, Z+
 a44:	01 10       	cpse	r0, r1
 a46:	d8 f7       	brcc	.-10     	; 0xa3e <strnlen+0x2>
 a48:	80 95       	com	r24
 a4a:	90 95       	com	r25
 a4c:	8e 0f       	add	r24, r30
 a4e:	9f 1f       	adc	r25, r31
 a50:	08 95       	ret

00000a52 <strrev>:
 a52:	dc 01       	movw	r26, r24
 a54:	fc 01       	movw	r30, r24
 a56:	67 2f       	mov	r22, r23
 a58:	71 91       	ld	r23, Z+
 a5a:	77 23       	and	r23, r23
 a5c:	e1 f7       	brne	.-8      	; 0xa56 <strrev+0x4>
 a5e:	32 97       	sbiw	r30, 0x02	; 2
 a60:	04 c0       	rjmp	.+8      	; 0xa6a <strrev+0x18>
 a62:	7c 91       	ld	r23, X
 a64:	6d 93       	st	X+, r22
 a66:	70 83       	st	Z, r23
 a68:	62 91       	ld	r22, -Z
 a6a:	ae 17       	cp	r26, r30
 a6c:	bf 07       	cpc	r27, r31
 a6e:	c8 f3       	brcs	.-14     	; 0xa62 <strrev+0x10>
 a70:	08 95       	ret

00000a72 <fputc>:
 a72:	0f 93       	push	r16
 a74:	1f 93       	push	r17
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	fb 01       	movw	r30, r22
 a7c:	23 81       	ldd	r18, Z+3	; 0x03
 a7e:	21 fd       	sbrc	r18, 1
 a80:	03 c0       	rjmp	.+6      	; 0xa88 <fputc+0x16>
 a82:	8f ef       	ldi	r24, 0xFF	; 255
 a84:	9f ef       	ldi	r25, 0xFF	; 255
 a86:	2c c0       	rjmp	.+88     	; 0xae0 <fputc+0x6e>
 a88:	22 ff       	sbrs	r18, 2
 a8a:	16 c0       	rjmp	.+44     	; 0xab8 <fputc+0x46>
 a8c:	46 81       	ldd	r20, Z+6	; 0x06
 a8e:	57 81       	ldd	r21, Z+7	; 0x07
 a90:	24 81       	ldd	r18, Z+4	; 0x04
 a92:	35 81       	ldd	r19, Z+5	; 0x05
 a94:	42 17       	cp	r20, r18
 a96:	53 07       	cpc	r21, r19
 a98:	44 f4       	brge	.+16     	; 0xaaa <fputc+0x38>
 a9a:	a0 81       	ld	r26, Z
 a9c:	b1 81       	ldd	r27, Z+1	; 0x01
 a9e:	9d 01       	movw	r18, r26
 aa0:	2f 5f       	subi	r18, 0xFF	; 255
 aa2:	3f 4f       	sbci	r19, 0xFF	; 255
 aa4:	31 83       	std	Z+1, r19	; 0x01
 aa6:	20 83       	st	Z, r18
 aa8:	8c 93       	st	X, r24
 aaa:	26 81       	ldd	r18, Z+6	; 0x06
 aac:	37 81       	ldd	r19, Z+7	; 0x07
 aae:	2f 5f       	subi	r18, 0xFF	; 255
 ab0:	3f 4f       	sbci	r19, 0xFF	; 255
 ab2:	37 83       	std	Z+7, r19	; 0x07
 ab4:	26 83       	std	Z+6, r18	; 0x06
 ab6:	14 c0       	rjmp	.+40     	; 0xae0 <fputc+0x6e>
 ab8:	8b 01       	movw	r16, r22
 aba:	ec 01       	movw	r28, r24
 abc:	fb 01       	movw	r30, r22
 abe:	00 84       	ldd	r0, Z+8	; 0x08
 ac0:	f1 85       	ldd	r31, Z+9	; 0x09
 ac2:	e0 2d       	mov	r30, r0
 ac4:	09 95       	icall
 ac6:	89 2b       	or	r24, r25
 ac8:	e1 f6       	brne	.-72     	; 0xa82 <fputc+0x10>
 aca:	d8 01       	movw	r26, r16
 acc:	16 96       	adiw	r26, 0x06	; 6
 ace:	8d 91       	ld	r24, X+
 ad0:	9c 91       	ld	r25, X
 ad2:	17 97       	sbiw	r26, 0x07	; 7
 ad4:	01 96       	adiw	r24, 0x01	; 1
 ad6:	17 96       	adiw	r26, 0x07	; 7
 ad8:	9c 93       	st	X, r25
 ada:	8e 93       	st	-X, r24
 adc:	16 97       	sbiw	r26, 0x06	; 6
 ade:	ce 01       	movw	r24, r28
 ae0:	df 91       	pop	r29
 ae2:	cf 91       	pop	r28
 ae4:	1f 91       	pop	r17
 ae6:	0f 91       	pop	r16
 ae8:	08 95       	ret

00000aea <__ultoa_invert>:
 aea:	fa 01       	movw	r30, r20
 aec:	aa 27       	eor	r26, r26
 aee:	28 30       	cpi	r18, 0x08	; 8
 af0:	51 f1       	breq	.+84     	; 0xb46 <__ultoa_invert+0x5c>
 af2:	20 31       	cpi	r18, 0x10	; 16
 af4:	81 f1       	breq	.+96     	; 0xb56 <__ultoa_invert+0x6c>
 af6:	e8 94       	clt
 af8:	6f 93       	push	r22
 afa:	6e 7f       	andi	r22, 0xFE	; 254
 afc:	6e 5f       	subi	r22, 0xFE	; 254
 afe:	7f 4f       	sbci	r23, 0xFF	; 255
 b00:	8f 4f       	sbci	r24, 0xFF	; 255
 b02:	9f 4f       	sbci	r25, 0xFF	; 255
 b04:	af 4f       	sbci	r26, 0xFF	; 255
 b06:	b1 e0       	ldi	r27, 0x01	; 1
 b08:	3e d0       	rcall	.+124    	; 0xb86 <__ultoa_invert+0x9c>
 b0a:	b4 e0       	ldi	r27, 0x04	; 4
 b0c:	3c d0       	rcall	.+120    	; 0xb86 <__ultoa_invert+0x9c>
 b0e:	67 0f       	add	r22, r23
 b10:	78 1f       	adc	r23, r24
 b12:	89 1f       	adc	r24, r25
 b14:	9a 1f       	adc	r25, r26
 b16:	a1 1d       	adc	r26, r1
 b18:	68 0f       	add	r22, r24
 b1a:	79 1f       	adc	r23, r25
 b1c:	8a 1f       	adc	r24, r26
 b1e:	91 1d       	adc	r25, r1
 b20:	a1 1d       	adc	r26, r1
 b22:	6a 0f       	add	r22, r26
 b24:	71 1d       	adc	r23, r1
 b26:	81 1d       	adc	r24, r1
 b28:	91 1d       	adc	r25, r1
 b2a:	a1 1d       	adc	r26, r1
 b2c:	20 d0       	rcall	.+64     	; 0xb6e <__ultoa_invert+0x84>
 b2e:	09 f4       	brne	.+2      	; 0xb32 <__ultoa_invert+0x48>
 b30:	68 94       	set
 b32:	3f 91       	pop	r19
 b34:	2a e0       	ldi	r18, 0x0A	; 10
 b36:	26 9f       	mul	r18, r22
 b38:	11 24       	eor	r1, r1
 b3a:	30 19       	sub	r19, r0
 b3c:	30 5d       	subi	r19, 0xD0	; 208
 b3e:	31 93       	st	Z+, r19
 b40:	de f6       	brtc	.-74     	; 0xaf8 <__ultoa_invert+0xe>
 b42:	cf 01       	movw	r24, r30
 b44:	08 95       	ret
 b46:	46 2f       	mov	r20, r22
 b48:	47 70       	andi	r20, 0x07	; 7
 b4a:	40 5d       	subi	r20, 0xD0	; 208
 b4c:	41 93       	st	Z+, r20
 b4e:	b3 e0       	ldi	r27, 0x03	; 3
 b50:	0f d0       	rcall	.+30     	; 0xb70 <__ultoa_invert+0x86>
 b52:	c9 f7       	brne	.-14     	; 0xb46 <__ultoa_invert+0x5c>
 b54:	f6 cf       	rjmp	.-20     	; 0xb42 <__ultoa_invert+0x58>
 b56:	46 2f       	mov	r20, r22
 b58:	4f 70       	andi	r20, 0x0F	; 15
 b5a:	40 5d       	subi	r20, 0xD0	; 208
 b5c:	4a 33       	cpi	r20, 0x3A	; 58
 b5e:	18 f0       	brcs	.+6      	; 0xb66 <__ultoa_invert+0x7c>
 b60:	49 5d       	subi	r20, 0xD9	; 217
 b62:	31 fd       	sbrc	r19, 1
 b64:	40 52       	subi	r20, 0x20	; 32
 b66:	41 93       	st	Z+, r20
 b68:	02 d0       	rcall	.+4      	; 0xb6e <__ultoa_invert+0x84>
 b6a:	a9 f7       	brne	.-22     	; 0xb56 <__ultoa_invert+0x6c>
 b6c:	ea cf       	rjmp	.-44     	; 0xb42 <__ultoa_invert+0x58>
 b6e:	b4 e0       	ldi	r27, 0x04	; 4
 b70:	a6 95       	lsr	r26
 b72:	97 95       	ror	r25
 b74:	87 95       	ror	r24
 b76:	77 95       	ror	r23
 b78:	67 95       	ror	r22
 b7a:	ba 95       	dec	r27
 b7c:	c9 f7       	brne	.-14     	; 0xb70 <__ultoa_invert+0x86>
 b7e:	00 97       	sbiw	r24, 0x00	; 0
 b80:	61 05       	cpc	r22, r1
 b82:	71 05       	cpc	r23, r1
 b84:	08 95       	ret
 b86:	9b 01       	movw	r18, r22
 b88:	ac 01       	movw	r20, r24
 b8a:	0a 2e       	mov	r0, r26
 b8c:	06 94       	lsr	r0
 b8e:	57 95       	ror	r21
 b90:	47 95       	ror	r20
 b92:	37 95       	ror	r19
 b94:	27 95       	ror	r18
 b96:	ba 95       	dec	r27
 b98:	c9 f7       	brne	.-14     	; 0xb8c <__ultoa_invert+0xa2>
 b9a:	62 0f       	add	r22, r18
 b9c:	73 1f       	adc	r23, r19
 b9e:	84 1f       	adc	r24, r20
 ba0:	95 1f       	adc	r25, r21
 ba2:	a0 1d       	adc	r26, r0
 ba4:	08 95       	ret

00000ba6 <__prologue_saves__>:
 ba6:	2f 92       	push	r2
 ba8:	3f 92       	push	r3
 baa:	4f 92       	push	r4
 bac:	5f 92       	push	r5
 bae:	6f 92       	push	r6
 bb0:	7f 92       	push	r7
 bb2:	8f 92       	push	r8
 bb4:	9f 92       	push	r9
 bb6:	af 92       	push	r10
 bb8:	bf 92       	push	r11
 bba:	cf 92       	push	r12
 bbc:	df 92       	push	r13
 bbe:	ef 92       	push	r14
 bc0:	ff 92       	push	r15
 bc2:	0f 93       	push	r16
 bc4:	1f 93       	push	r17
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
 bca:	cd b7       	in	r28, 0x3d	; 61
 bcc:	de b7       	in	r29, 0x3e	; 62
 bce:	ca 1b       	sub	r28, r26
 bd0:	db 0b       	sbc	r29, r27
 bd2:	0f b6       	in	r0, 0x3f	; 63
 bd4:	f8 94       	cli
 bd6:	de bf       	out	0x3e, r29	; 62
 bd8:	0f be       	out	0x3f, r0	; 63
 bda:	cd bf       	out	0x3d, r28	; 61
 bdc:	09 94       	ijmp

00000bde <__epilogue_restores__>:
 bde:	2a 88       	ldd	r2, Y+18	; 0x12
 be0:	39 88       	ldd	r3, Y+17	; 0x11
 be2:	48 88       	ldd	r4, Y+16	; 0x10
 be4:	5f 84       	ldd	r5, Y+15	; 0x0f
 be6:	6e 84       	ldd	r6, Y+14	; 0x0e
 be8:	7d 84       	ldd	r7, Y+13	; 0x0d
 bea:	8c 84       	ldd	r8, Y+12	; 0x0c
 bec:	9b 84       	ldd	r9, Y+11	; 0x0b
 bee:	aa 84       	ldd	r10, Y+10	; 0x0a
 bf0:	b9 84       	ldd	r11, Y+9	; 0x09
 bf2:	c8 84       	ldd	r12, Y+8	; 0x08
 bf4:	df 80       	ldd	r13, Y+7	; 0x07
 bf6:	ee 80       	ldd	r14, Y+6	; 0x06
 bf8:	fd 80       	ldd	r15, Y+5	; 0x05
 bfa:	0c 81       	ldd	r16, Y+4	; 0x04
 bfc:	1b 81       	ldd	r17, Y+3	; 0x03
 bfe:	aa 81       	ldd	r26, Y+2	; 0x02
 c00:	b9 81       	ldd	r27, Y+1	; 0x01
 c02:	ce 0f       	add	r28, r30
 c04:	d1 1d       	adc	r29, r1
 c06:	0f b6       	in	r0, 0x3f	; 63
 c08:	f8 94       	cli
 c0a:	de bf       	out	0x3e, r29	; 62
 c0c:	0f be       	out	0x3f, r0	; 63
 c0e:	cd bf       	out	0x3d, r28	; 61
 c10:	ed 01       	movw	r28, r26
 c12:	08 95       	ret

00000c14 <_exit>:
 c14:	f8 94       	cli

00000c16 <__stop_program>:
 c16:	ff cf       	rjmp	.-2      	; 0xc16 <__stop_program>
